import 'dart:convert';
import 'dart:io';
import 'package:firebase_ai/firebase_ai.dart';
import 'package:movie_tickets/features/authentication/data/models/user_model.dart';
import 'package:movie_tickets/features/movies/data/models/movie_model.dart';
import 'package:movie_tickets/features/movies/domain/repositories/movie_repository.dart';
import 'package:movie_tickets/injection.dart';

// Model cho response t·ª´ AI
class AIChatResponse {
  final String message;
  final List<ChatAction>? actions;
  final Map<String, dynamic>? metadata;

  AIChatResponse({
    required this.message,
    this.actions,
    this.metadata,
  });

  factory AIChatResponse.fromJson(Map<String, dynamic> json) {
    return AIChatResponse(
      message: json['message'] ?? '',
      actions: json['actions'] != null 
        ? (json['actions'] as List).map((e) => ChatAction.fromJson(e)).toList()
        : null,
      metadata: json['metadata'],
    );
  }
}

// Model cho c√°c action m√† AI c√≥ th·ªÉ th·ª±c hi·ªán
class ChatAction {
  final String type; // 'navigate', 'api_call', 'button'
  final String label;
  final String route;
  final Map<String, dynamic>? parameters;
  final String? apiEndpoint;
  final String? buttonId;

  ChatAction({
    required this.type,
    required this.label,
    this.route = '',
    this.parameters,
    this.apiEndpoint,
    this.buttonId,
  });

  factory ChatAction.fromJson(Map<String, dynamic> json) {
    return ChatAction(
      type: json['type'],
      label: json['label'],
      route: json['route'] ?? '',
      parameters: json['parameters'],
      apiEndpoint: json['apiEndpoint'],
      buttonId: json['buttonId'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'type': type,
      'label': label,
      'route': route,
      'parameters': parameters,
      'apiEndpoint': apiEndpoint,
      'buttonId': buttonId,
    };
  }
}

class AIChatbotService {
  late GenerativeModel _model;
  ChatSession? _chat;
  UserModel? _currentUser;
  String _language = 'vi';
  final MovieRepository movieRepository = sl<MovieRepository>();
  List<MovieModel>? _cachedMovies;


  void initialize({String language = 'vi'}) {
    _language = language;
    _model = FirebaseAI.googleAI().generativeModel(
      model: 'gemini-2.0-flash-exp',
      generationConfig: GenerationConfig(
        maxOutputTokens: 2000,
        temperature: 0.7,
        topP: 0.9,
      ),
    );
  }

  Future<void> startChatWithReservation(UserModel user) async {
    _currentUser = user;
    
    // Load movies cache for better search
    await _loadMoviesCache();

    final systemPrompt = _buildSystemPrompt();

    _chat = _model.startChat(history: [
      Content.text(systemPrompt),
      Content.model([TextPart(_getWelcomeMessage(_currentUser!.fullName))])
    ]);
  }

  Future<void> _loadMoviesCache() async {
    try {
      final result = await movieRepository.getListShowingMovies();
      if (result.isSuccess && result.data != null) {
        _cachedMovies = result.data;
      }
    } catch (e) {
      _cachedMovies = [];
      print('Error loading movies cache: $e');
    }
    }

  String _buildSystemPrompt() {

    final Map<String, String> prompts = {
      'vi': '''
        B·∫°n l√† tr·ª£ l√Ω AI cho ·ª©ng d·ª•ng ƒë·∫∑t v√© xem phim. B·∫°n c√≥ th·ªÉ h·ªó tr·ª£ kh√°ch h√†ng ƒëi·ªÅu h∆∞·ªõng trong app.

        NH·ªö DANH S√ÅCH PHIM HI·ªÜN T·∫†I N·∫æU C√ì:
        $_cachedMovies
        N·∫æU R·ªñNG HO·∫∂C G·∫∂P L·ªñI KHI L·∫§Y D·ªÆ LI·ªÜU TH√å H√ÉY TH√îNG B√ÅO V·ªöI NG∆Ø·ªúI D√ôNG KHI NG∆Ø·ªúI D√ôNG C√ì C√ÇU H·ªéI LI√äN QUAN.

        C√ÅC T√çNH NƒÇNG B·∫†N C√ì TH·ªÇ H·ªñ TR·ª¢:
        1. T√¨m ki·∫øm phim theo t√™n (kh√¥ng c·∫ßn ch√≠nh x√°c 100%)
        2. ƒê·∫∑t v√© cho phim c·ª• th·ªÉ
        3. ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn c√°c trang kh√°c nhau
        4. Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ phim
        5. X·ª≠ l√Ω h√¨nh ·∫£nh ng∆∞·ªùi d√πng g·ª≠i - m√¥ t·∫£ n·ªôi dung v√† t√¨m phim li√™n quan
        5. ƒê∆∞a ra danh s√°ch phim hi·ªán t·∫°i ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn

        KHI NG∆Ø·ªúI CH·ªåN PHIM:
        - T√¨m phim trong danh s√°ch d·ª±a tr√™n t√™n (s·ª≠ d·ª•ng fuzzy matching)
        - T·∫°o button ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t v√© v·ªõi movieId

        KHI NG∆Ø·ªúI D√ôNG G·ª¨I H√åNH ·∫¢NH:
        - M√¥ t·∫£ chi ti·∫øt n·ªôi dung h√¨nh ·∫£nh
        - N·∫øu h√¨nh ·∫£nh li√™n quan ƒë·∫øn phim (poster, c·∫£nh phim, di·ªÖn vi√™n), t√¨m phim t∆∞∆°ng ·ª©ng
        - ƒê·ªÅ xu·∫•t ƒë·∫∑t v√© n·∫øu t√¨m th·∫•y phim ph√π h·ª£p
        - Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ h√¨nh ·∫£nh n·∫øu ng∆∞·ªùi d√πng h·ªèi

        KHI NG∆Ø·ªúI D√ôNG MU·ªêN ƒê·∫∂T V√â CHO PHIM:
        - T√¨m phim trong danh s√°ch d·ª±a tr√™n t√™n (s·ª≠ d·ª•ng fuzzy matching)
        - T·∫°o button ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒë·∫∑t v√© v·ªõi movieId
        - N·∫øu kh√¥ng t√¨m th·∫•y phim ch√≠nh x√°c, ƒë·ªÅ xu·∫•t phim t∆∞∆°ng t·ª±

        C√ÅC ROUTE AVAILABLE:
        - /home: Trang ch·ªß
        - /movie_detail: Chi ti·∫øt phim (c·∫ßn movie)
        - /showing_movie_booking: ƒê·∫∑t v√© (c·∫ßn movieId)
        - /seat_booking: Ch·ªçn gh·∫ø (c·∫ßn movie + showingMovie)
        - /snack_booking: Ch·ªçn ƒë·ªì ƒÉn
        - /payment: Thanh to√°n
        - /setting: C√†i ƒë·∫∑t

        ƒê·ªäNH D·∫†NG RESPONSE:
        B·∫°n PH·∫¢I tr·∫£ v·ªÅ JSON v·ªõi format:
        {
          "message": "Tin nh·∫Øn c·ªßa b·∫°n",
          "actions": [
            {
              "type": "navigate|api_call|button",
              "label": "Nh√£n hi·ªÉn th·ªã",
              "route": "/route_path",
              "parameters": {"movieId": "id_cua_phim"},
              "apiEndpoint": "/api/endpoint"
            }
          ]
        }

        V√ç D·ª§ X·ª¨ L√ù ƒê·∫∂T V√â:
        User: "T√¥i mu·ªën ƒë·∫∑t v√© xem Spider-Man"
        Response: {
          "message": "T√¥i t√¨m th·∫•y phim Spider-Man cho b·∫°n! B·∫°n c√≥ mu·ªën xem l·ªãch chi·∫øu kh√¥ng?",
          "actions": [
            {
              "type": "navigate",
              "label": "üé¨ ƒê·∫∑t v√© Spider-Man",
              "route": "/showing_movie_booking",
              "parameters": {"movieId": "123"}
            }
          ]
        }

        V√ç D·ª§ X·ª¨ L√ù H√åNH ·∫¢NH:
        User g·ª≠i poster phim Spider-Man
        Response: {
          "message": "T√¥i th·∫•y ƒë√¢y l√† poster phim Spider-Man! ƒê√¢y l√† m·ªôt b·ªô phim si√™u anh h√πng r·∫•t hay. B·∫°n c√≥ mu·ªën ƒë·∫∑t v√© xem kh√¥ng?",
          "actions": [
            {
              "type": "navigate", 
              "label": "üé¨ ƒê·∫∑t v√© Spider-Man",
              "route": "/showing_movie_booking",
              "parameters": {"movieId": "123"}
            },
            {
              "type": "navigate",
              "label": "üìã Xem chi ti·∫øt phim", 
              "route": "/movie_detail",
              "parameters": {"movieId": "123"}
            }
          ]
        }

        LU√îN tr·∫£ v·ªÅ JSON h·ª£p l·ªá v√† ch·ªâ s·ª≠ d·ª•ng ti·∫øng Vi·ªát.
      ''',
    };

    return prompts[_language] ?? prompts['vi']!;
  }

  String _getWelcomeMessage(String customerName) {
    final welcomeResponse = {
      "message": _language == 'vi' 
        ? "Xin ch√†o $customerName! üé¨ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ƒë·∫∑t v√© xem phim, t√¨m phim hay, ho·∫∑c tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ b·∫•t k·ª≥ h√¨nh ·∫£nh n√†o b·∫°n g·ª≠i. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?"
        : "Hello $customerName! üé¨ I can help you book movie tickets, find great movies, or answer questions about any images you send. What do you need help with?",
      "actions": [
        {
          "type": "navigate",
          "label": _language == 'vi' ? "üé¨ Xem phim ƒëang chi·∫øu" : "üé¨ Browse Movies",
          "route": "/home"
        },
        {
          "type": "button",
          "label": _language == 'vi' ? "üîç T√¨m phim y√™u th√≠ch" : "üîç Search Movies",
          "buttonId": "search_movies"
        },
        {
          "type": "navigate",
          "label": _language == 'vi' ? "‚öôÔ∏è C√†i ƒë·∫∑t" : "‚öôÔ∏è Settings",
          "route": "/setting"
        }
      ]
    };

    return jsonEncode(welcomeResponse);
  }

  // T√¨m phim d·ª±a tr√™n t√™n (fuzzy search)
  MovieModel? _findMovieByName(String movieName) {
    if (_cachedMovies == null || _cachedMovies!.isEmpty) return null;

    final searchName = movieName.toLowerCase().trim();
    
    // Exact match first
    var movie = _cachedMovies!.firstWhere(
      (movie) => movie.title.toLowerCase() == searchName,
      orElse: () => MovieModel.empty(),
    );
    
    if (movie.movieId != 0) return movie;
    
    // Partial match
    movie = _cachedMovies!.firstWhere(
      (movie) => movie.title.toLowerCase().contains(searchName) ||
                 searchName.contains(movie.title.toLowerCase()),
      orElse: () => MovieModel.empty(),
    );
    
    if (movie.movieId != 0) return movie;
    
    return null;
  }

  // T√¨m phim t∆∞∆°ng t·ª±
  List<MovieModel> _findSimilarMovies(String movieName, {int limit = 3}) {
    if (_cachedMovies == null || _cachedMovies!.isEmpty) return [];

    final searchName = movieName.toLowerCase().trim();
    final similarMovies = <MovieModel>[];
    
    for (final movie in _cachedMovies!) {
      final title = movie.title.toLowerCase();
      
      // Check if any word in search matches any word in title
      final searchWords = searchName.split(' ');
      final titleWords = title.split(' ');
      
      bool hasMatch = false;
      for (final searchWord in searchWords) {
        for (final titleWord in titleWords) {
          if (searchWord.length >= 3 && titleWord.contains(searchWord)) {
            hasMatch = true;
            break;
          }
        }
        if (hasMatch) break;
      }
      
      if (hasMatch) {
        similarMovies.add(movie);
      }
    }
    
    return similarMovies.take(limit).toList();
  }

  Future<AIChatResponse> sendMessage(String message, {File? imageFile}) async {
    if (_chat == null) {
      throw Exception('Chat not initialized. Please start chat with reservation first.');
    }

    try {
      Content content;
      
      if (imageFile != null) {
        // Handle image + text message - FIXED VERSION
        final imageBytes = await imageFile.readAsBytes();
        
        // Create proper image part with mime type detection
        String mimeType = 'image/jpeg'; // default
        final extension = imageFile.path.toLowerCase().split('.').last;
        switch (extension) {
          case 'png':
            mimeType = 'image/png';
            break;
          case 'jpg':
          case 'jpeg':
            mimeType = 'image/jpeg';
            break;
          case 'webp':
            mimeType = 'image/webp';
            break;
        }
        content = Content.inlineData(mimeType, imageBytes);
      } else {
        content = Content.text(message);
      }

      final response = await _chat!.sendMessage(content);
      final responseText = response.text ?? '';
      
      if (responseText.isEmpty) {
        return AIChatResponse(
          message: _language == 'vi' 
            ? 'Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.'
            : 'Sorry, I did not understand your question. Please try again.',
        );
      }

      // Try to parse as JSON first with better error handling
      return _parseAIResponse(responseText, message, imageFile != null);
      
    } catch (e) {
      print('Error in sendMessage: $e');
      return AIChatResponse(
        message: _language == 'vi' 
          ? 'T√¥i ƒëang g·∫∑p m·ªôt s·ªë kh√≥ khƒÉn k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau m·ªôt l√°t.'
          : 'I\'m experiencing some technical difficulties. Please try again in a moment.',
      );
    }
  }

  AIChatResponse _parseAIResponse(String responseText, String originalMessage, bool hasImage) {
    // Try to parse as JSON
    try {
      responseText = responseText.substring(responseText.indexOf('{'), responseText.lastIndexOf('}') + 1);
      final jsonResponse = jsonDecode(responseText);
      return AIChatResponse.fromJson(jsonResponse);
    } catch (e) {
      print('JSON parse error: $e');
      print('Response text: $responseText');

      // If not JSON, handle as text response
      if (hasImage) {
        return _handleImageResponse(responseText, originalMessage);
      } else {
        return _handleTextResponse(responseText, originalMessage);
      }
    }
  }

  AIChatResponse _handleImageResponse(String responseText, String originalMessage) {
    // For image responses, try to extract movie information
    final lowerResponse = responseText.toLowerCase();
    
    // Look for movie names in the response
    if (_cachedMovies != null) {
      for (final movie in _cachedMovies!) {
        if (lowerResponse.contains(movie.title.toLowerCase())) {
          return AIChatResponse(
            message: responseText,
            actions: [
              ChatAction(
                type: 'navigate',
                label: 'üé¨ ƒê·∫∑t v√© ${movie.title}',
                route: '/showing_movie_booking',
                parameters: {'movieId': movie.movieId.toString()},
              ),
              ChatAction(
                type: 'navigate',
                label: 'üìã Xem chi ti·∫øt phim',
                route: '/movie_detail',
                parameters: {'movieId': movie.movieId.toString()},
              ),
            ],
          );
        }
      }
    }
    
    // Default image response without actions
    return AIChatResponse(message: responseText);
  }

  AIChatResponse _handleTextResponse(String responseText, String originalMessage) {
    // Check if user wants to book a movie
    final lowerMessage = originalMessage.toLowerCase();
    
    if (lowerMessage.contains('ƒë·∫∑t v√©') || 
        lowerMessage.contains('ƒë·∫∑t su·∫•t') ||
        lowerMessage.contains('xem phim') ||
        lowerMessage.contains('book') ||
        lowerMessage.contains('ticket')) {
      
      // Extract movie name from message
      final movieName = _extractMovieName(originalMessage);
      if (movieName.isNotEmpty) {
        final movie = _findMovieByName(movieName);
        
        if (movie != null) {
          return AIChatResponse(
            message: 'T√¥i t√¨m th·∫•y phim "${movie.title}" cho b·∫°n! B·∫°n c√≥ mu·ªën xem l·ªãch chi·∫øu v√† ƒë·∫∑t v√© kh√¥ng?',
            actions: [
              ChatAction(
                type: 'navigate',
                label: 'üé¨ ƒê·∫∑t v√© ${movie.title}',
                route: '/showing_movie_booking',
                parameters: {'movieId': movie.movieId.toString()},
              ),
              ChatAction(
                type: 'navigate',
                label: 'üìã Xem chi ti·∫øt phim',
                route: '/movie_detail',
                parameters: {'movieId': movie.movieId.toString()},
              ),
            ],
          );
        } else {
          // Try to find similar movies
          final similarMovies = _findSimilarMovies(movieName);
          if (similarMovies.isNotEmpty) {
            final actions = similarMovies.map((movie) => ChatAction(
              type: 'navigate',
              label: 'üé¨ ${movie.title}',
              route: '/showing_movie_booking',
              parameters: {'movieId': movie.movieId.toString()},
            )).toList();
            
            return AIChatResponse(
              message: 'T√¥i kh√¥ng t√¨m th·∫•y phim "$movieName" ch√≠nh x√°c, nh∆∞ng c√≥ nh·ªØng phim t∆∞∆°ng t·ª±:',
              actions: actions,
            );
          }
        }
      }
    }
    
    // Default response
    return AIChatResponse(message: responseText);
  }

  String _extractMovieName(String message) {
    // Simple extraction - can be improved with better NLP
    final lowerMessage = message.toLowerCase();
    
    // Remove common booking phrases
    final cleanMessage = lowerMessage
        .replaceAll('t√¥i mu·ªën ƒë·∫∑t v√© xem', '')
        .replaceAll('t√¥i mu·ªën ƒë·∫∑t v√© cho', '')
        .replaceAll('ƒë·∫∑t v√© xem', '')
        .replaceAll('ƒë·∫∑t v√© cho', '')
        .replaceAll('ƒë·∫∑t su·∫•t chi·∫øu cho', '')
        .replaceAll('xem phim', '')
        .replaceAll('phim', '')
        .trim();
    
    // If there are quotes, extract content between them
    final quoteMatch = RegExp(r'"([^"]*)"').firstMatch(cleanMessage);
    if (quoteMatch != null) {
      return quoteMatch.group(1) ?? '';
    }
    
    return cleanMessage;
  }

  // Method ƒë·ªÉ x·ª≠ l√Ω action t·ª´ AI
  Future<AIChatResponse> executeAction(ChatAction action, {Map<String, dynamic>? additionalData}) async {
    switch (action.type) {
      case 'api_call':
        return await _handleApiCall(action, additionalData);
      case 'navigate':
        return _handleNavigation(action);
      case 'button':
        return await _handleButtonAction(action, additionalData);
      default:
        return AIChatResponse(
          message: 'Unknown action type: ${action.type}',
        );
    }
  }

  Future<AIChatResponse> _handleApiCall(ChatAction action, Map<String, dynamic>? data) async {
    await Future.delayed(Duration(milliseconds: 500));
    
    final message = _language == 'vi' 
      ? "ƒê√£ g·ªçi API ${action.apiEndpoint}. D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i!"
      : "Called API ${action.apiEndpoint}. Data loaded!";
    
    return AIChatResponse(
      message: message,
      metadata: {'api_result': 'success', 'endpoint': action.apiEndpoint},
    );
  }

  AIChatResponse _handleNavigation(ChatAction action) {
    final message = _language == 'vi' 
      ? "ƒêang ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn ${action.route}..."
      : "Navigating to ${action.route}...";
    
    return AIChatResponse(
      message: message,
      metadata: {
        'navigation': {
          'route': action.route,
          'parameters': action.parameters,
        }
      },
    );
  }

  Future<AIChatResponse> _handleButtonAction(ChatAction action, Map<String, dynamic>? data) async {
    switch (action.buttonId) {
      case 'search_movies':
        if (_cachedMovies != null && _cachedMovies!.isNotEmpty) {
          final randomMovies = (_cachedMovies!..shuffle()).take(5).toList();
          final actions = randomMovies.map((movie) => ChatAction(
            type: 'navigate',
            label: 'üé¨ ${movie.title}',
            route: '/showing_movie_booking',
            parameters: {'movieId': movie.movieId.toString()},
          )).toList();
          
          return AIChatResponse(
            message: 'ƒê√¢y l√† m·ªôt s·ªë phim hay b·∫°n c√≥ th·ªÉ quan t√¢m:',
            actions: actions,
          );
        }
        break;
    }
    
    final message = _language == 'vi' 
      ? "ƒê√£ th·ª±c hi·ªán action: ${action.label}"
      : "Executed action: ${action.label}";
    
    return AIChatResponse(
      message: message,
      metadata: {'button_action': action.buttonId, 'data': data},
    );
  }

  void setLanguage(String language) {
    _language = language;
  }

  String getCurrentLanguage() {
    return _language;
  }

  UserModel? getCurrentUser() {
    return _currentUser;
  }

  void resetChat() {
    _chat = null;
    _currentUser = null;
    _cachedMovies = null;
  }

  bool get isChatActive => _chat != null;
}